declare class Math {
    static MAD(data: any[], center?: number): number;
    static Qn(data: any[]): number;
    static Sn(data: any[]): number;
    static abs(x: number): number;
    static acos(x: number): number;
    static acosh(x: number): number;
    static ahav(x: number): number;
    static angle(deg: number, min?: number, sec?: number): number;
    static asin(x: number): number;
    static asinh(x: number): number;
    static atan(y: number, x?: number): number;
    static atan2(y: number, x: number): number;
    static atan2pi(y: number, x: number): number;
    static atanh(x: number): number;
    static avgDev(data: any[], center?: number): number;
    static bendMidvariance(data: any[], center?: number, beta?: number): number;
    static biweightMidvariance(data: any[], center?: number, sigma?: number, k?: number, reducedLength?: boolean): number;
    static calendarTimeToJD(year: number, month: number, day: number, dayFraction: number): number;
    static calendarTimeToJD(year: number, month: number, days: number): number;
    static calendarTimeToJD(dateTime: string): number;
    static calendarTimeToJD2(year: number, month: number, day: number, dayFraction: number): any[];
    static calendarTimeToJD2(year: number, month: number, days: number): any[];
    static calendarTimeToJD2(dateTime: string): any[];
    static ceil(x: number): number;
    static cos(x: number): number;
    static cosh(x: number): number;
    static cotan(x: number): number;
    static decimalToSexagesimal(degrees: number): any[];
    static deg(x: number): number;
    static erf(x: number): number;
    static erfinv(x: number): number;
    static exp(x: number): number;
    static fact(x: number): number;
    static floor(x: number): number;
    static frac(x: number): number;
    static frexp(x: number): any[];
    static hav(x: number): number;
    static heapSort(data: any[]): void;
    static homography(P1: any[], P2: any[]): any;
    static initRandomGenerator(seed64?: any[]): void;
    static initRandomGenerator(seedLSW: number, seedMSW: number): void;
    static initRandomGenerator(seed32: number): void;
    static insertionSort(data: any[]): void;
    static jdToCalendarTime(jd1: number, jd2?: number): any[];
    static ldexp(mant: number, exp: number): number;
    static ln(x: number): number;
    static lngamma(x: number): number;
    static log(x: number): number;
    static log10(x: number): number;
    static log2(x: number): number;
    static logn(n: number, x: number): number;
    static max(x1: number, ...nums: number[]): number;
    static maxElem(data: any[]): number;
    static mean(data: any[]): number;
    static median(data: any[]): number;
    static min(x1: number, ...nums: number[]): number;
    static min2rad(x: number): number;
    static minElem(data: any[]): number;
    static mod(x: number, y: number): number;
    static modulus(data: any[]): number;
    static mtf(m: number, x: number): number;
    static parseInteger(s: string, lowerBound?: number, upperBound?: number): number;
    static parseReal(s: string, precision?: number, lowerBound?: number, upperBound?: number): number;
    static poly(x: number, coeffs: any[]): number;
    static pow(x: number, y: number): number;
    static pow10(x: number): number;
    static pow2(x: number): number;
    static quickSort(data: any[]): void;
    static rad(x: number): number;
    static rad2min(x: number): number;
    static rad2sec(x: number): number;
    static random(): number;
    static randomArray(n: number): any[];
    static randomFloat32Array(n: number, distr?: string, distr_p1?: any, distr_p2?: any): Float32Array;
    static randomFloat64Array(n: number, distr?: string, distr_p1?: any, distr_p2?: any): Float64Array;
    static randomSeed32(): number;
    static randomSeed64(): any[];
    static range(x: number, a: number, b: number): number;
    static round(x: number): number;
    static roundTo(x: number, n: number): number;
    static sec2rad(x: number): number;
    static select(data: any[], k: number): number;
    static sexagesimalToDecimal(sign: number, s1: number, s2?: number, s3?: number): number;
    static sign(x: number): number;
    static sin(x: number): number;
    static sinh(x: number): number;
    static solve(A: any, B: any): any[];
    static sqrt(x: number): number;
    static stableAvgDev(data: any[], center?: number): number;
    static stableMean(data: any[]): number;
    static stableModulus(data: any[]): number;
    static stableSum(data: any[]): number;
    static stableSumOfSquares(data: any[]): number;
    static stdDev(data: any[]): number;
    static sum(data: any[]): number;
    static sumOfSquares(data: any[]): number;
    static svd(A: any): any[];
    static tan(x: number): number;
    static tanh(x: number): number;
    static trimmedMean(data: any[], l?: number, h?: number): number;
    static trimmedMeanOfSquares(data: any[], l?: number, h?: number): number;
    static trunc(x: number): number;
    static twoSidedAvgDev(data: any[], center?: number): any[];
    static twoSidedBiweightMidvariance(data: any[], center?: number, sigma?: any, k?: number, reducedLength?: boolean): any[];
    static twoSidedMAD(data: any[], center?: number): any[];
    static uiResourceScalingFactor(scalingFactor: number): number;
    static uiResourceScalingFactorForIndex(index: number): number;
    static uiResourceScalingIndex(scalingFactor: number): number;
    static uiScaled(scalingFactor: number, size: number): number;
    static uiScaledResource(scalingFactor: number, resource: string): string;
    static uiScaledResourceForIndex(index: number, resource: string): string;
    static uiUnscaled(scalingFactor: number, size: number): number;
    static variance(data: any[]): number;
    static readonly DEG: number;
    static readonly E: number;
    static readonly EPSILON: number;
    static readonly EPSILON32: number;
    static readonly GOLDEN: number;
    static readonly LN10: number;
    static readonly LN2: number;
    static readonly LOG10E: number;
    static readonly LOG2E: number;
    static readonly LOWEST: number;
    static readonly LOWEST32: number;
    static readonly MAX: number;
    static readonly MAX32: number;
    static readonly MIN: number;
    static readonly MIN32: number;
    static readonly PI: number;
    static readonly PI2: number;
    static readonly PI4: number;
    static readonly RAD: number;
    static readonly SQRT1_2: number;
    static readonly SQRT2: number;
    static readonly _1_PI: number;
    static readonly _2PI: number;
    static readonly _2_PI: number;
    static readonly _3PI2: number;
    static readonly _3PI4: number;
    static readonly _5PI4: number;
    static readonly _7PI4: number;
}
