declare class Point {
  x: number;
  y: number;

  constructor();
  constructor(x: number, y: number);
  constructor(d: number);
  constructor(p: Point);

  add(p: Point): void;
  add(x: number, y?: number): void;
  assign(p: Point): void;
  assign(x: number, y?: number): void;
  distanceTo(p: Point): number;
  distanceTo(x: number, y: number): number;
  div(p: Point): void;
  div(x: number, y?: number): void;
  dot(p: Point): number;
  dot(x: number, y: number): number;
  isEqualTo(p: Point): boolean;
  isEqualTo(x: number, y: number): boolean;
  isEqualTo(scalar: number): boolean;
  isLessThan(p: Point): boolean;
  isLessThan(x: number, y: number): boolean;
  isLessThan(scalar: number): boolean;
  moveBy(d: Point): void;
  moveBy(dx: number, dy?: number): void;
  moveTo(p: Point): void;
  moveTo(x: number, y?: number): void;
  movedBy(d: Point): Point;
  movedBy(dx: number, dy?: number): Point;
  movedTo(p: Point): Point;
  movedTo(x: number, y?: number): Point;
  mul(p: Point): void;
  mul(x: number, y?: number): void;
  rotate(angleRadians: number, center?: Point): void;
  rotate(sin: number, cos: number, center?: Point): void;
  rotate(angleRadians: number, cx: number, cy: number): void;
  rotate(sin: number, cos: number, cx: number, cy: number): void;
  rotated(angleRadians: number, center?: Point): Point;
  rotated(sin: number, cos: number, center?: Point): Point;
  rotated(angleRadians: number, cx: number, cy: number): Point;
  rotated(sin: number, cos: number, cx: number, cy: number): Point;
  round(n?: number): void;
  rounded(n?: number): Point;
  sub(p: Point): void;
  sub(x: number, y?: number): void;
  symmetric(): Point;
  symmetrize(): void;
  toArray(): any[];
  toString(): string;
  toVector(): any;
  transform(M: any): void;
  transformed(M: any): Point;
  translate(p: Point): void;
  translate(x: number, y?: number): void;
  translateBy(d: Point): void;
  translateBy(dx: number, dy?: number): void;
  translated(p: Point): Point;
  translated(x: number, y?: number): Point;
  translatedBy(d: Point): Point;
  translatedBy(dx: number, dy?: number): Point;
  truncate(): void;
  truncated(): Point;
}
