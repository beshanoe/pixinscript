declare class Control {
  __base__: any;
  constructor(...args: any[]);
  activateWindow: any;
  adjustToContents: any;
  alternateCanvasColor: any;
  backgroundColor: any;
  boundsRect: any;
  bringToFront: any;
  buttonColor: any;
  buttonTextColor: any;
  canUpdate: any;
  canvasColor: any;
  childByPos: any;
  childToFocus: any;
  childrenRect: any;
  clientRect: any;
  controlToLocal: any;
  cursor: any;
  dialog: any;
  displayPixelRatio: any;
  enabled: any;
  ensureLayoutUpdated: any;
  focusStyle: any;
  focusedChild: any;
  font: any;
  foregroundColor: any;
  frameRect: any;
  globalToLocal: any;
  hasFocus: any;
  height: any;
  hide: any;
  hideAlias: any;
  highlightColor: any;
  highlightedTextColor: any;
  isActiveWindow: any;
  isAncestorOf: any;
  isDialog: any;
  isFixedHeight: any;
  isFixedWidth: any;
  isMaximized: any;
  isMinimized: any;
  isModal: any;
  isUnderMouse: any;
  isWindow: any;
  localToControl: any;
  localToGlobal: any;
  localToParent: any;
  logicalPixelsToPhysical: any;
  maxHeight: any;
  maxWidth: any;
  minHeight: any;
  minWidth: any;
  mouseTracking: any;
  move: any;
  nextSiblingToFocus: any;
  objectId: any;
  onChildCreate: any;
  onChildDestroy: any;
  onClose: any;
  onDestroy: any;
  onEnter: any;
  onGetFocus: any;
  onHide: any;
  onKeyPress: any;
  onKeyRelease: any;
  onLeave: any;
  onLoseFocus: any;
  onMouseDoubleClick: any;
  onMouseMove: any;
  onMousePress: any;
  onMouseRelease: any;
  onMouseWheel: any;
  onMove: any;
  onPaint: any;
  onResize: any;
  onShow: any;
  parent: Control;
  parentToLocal: any;
  physicalPixelsToLogical: any;
  position: any;
  render: any;
  repaint: any;
  resize: any;
  resourcePixelRatio: any;
  restyle: any;
  scaledMaxHeight: any;
  scaledMaxWidth: any;
  scaledMinHeight: any;
  scaledMinWidth: any;
  scaledResource: any;
  scaledStyleSheet: any;
  scroll: any;
  sendToBack: any;
  setCursorToParent: any;
  setFixedHeight: any;
  setFixedSize: any;
  setFixedWidth: any;
  setMaxHeight: any;
  setMaxSize: any;
  setMaxWidth: any;
  setMinHeight: any;
  setMinSize: any;
  setMinWidth: any;
  setScaledFixedHeight: any;
  setScaledFixedSize: any;
  setScaledFixedWidth: any;
  setScaledMaxHeight: any;
  setScaledMaxSize: any;
  setScaledMaxWidth: any;
  setScaledMinHeight: any;
  setScaledMinSize: any;
  setScaledMinWidth: any;
  setVariableHeight: any;
  setVariableSize: any;
  setVariableWidth: any;
  show: any;
  showAlias: any;
  sizer: Sizer;
  smartMinHeight: any;
  smartMinWidth: any;
  stackUnder: any;
  styleSheet: any;
  textColor: any;
  toolTip: any;
  uniqueId: any;
  update: any;
  visible: any;
  visibleRect: any;
  width: any;
  window: any;
  windowOpacity: any;
  windowTitle: any;
}
declare class CheckBox extends Control {
  checked: boolean;
  onCheck: (checked: boolean) => void;
  onClick: any;
  onPress: any;
  onRelease: any;
  state: any;
  text: any;
  tristate: any;
}
declare class ComboBox extends Control {
  addItem: any;
  autoCompletion: any;
  clear: any;
  clearEditText: any;
  clearItemIcon: any;
  clearItemText: any;
  currentItem: any;
  editEnabled: any;
  editText: any;
  findItem: any;
  hideList: any;
  iconHeight: any;
  iconWidth: any;
  insertItem: any;
  itemIcon: any;
  itemText: any;
  maxVisibleItemCount: any;
  minItemCharWidth: any;
  numberOfItems: any;
  onEditTextUpdated: any;
  onItemHighlighted: any;
  onItemSelected: (index: number) => void;
  popupToolTip: any;
  removeItem: any;
  setItemIcon: any;
  setItemText: any;
  showList: any;
}
declare class Dialog extends Control {
  cancel: any;
  done: any;
  execute: any;
  newInstance: any;
  ok: any;
  onExecute: any;
  onReturn: any;
  open: any;
  result: any;
  userResizable: any;
}
declare class Edit extends Control {
  caretPosition: any;
  clear: any;
  end: any;
  hasSelection: any;
  home: any;
  maxLength: any;
  modified: any;
  onCaretPositionUpdated: any;
  onEditCompleted: any;
  onReturnPressed: any;
  onSelectionUpdated: any;
  onTextUpdated: any;
  passwordMode: any;
  readOnly: any;
  rightAlignment: any;
  selectAll: any;
  selectedText: any;
  selectionEnd: any;
  selectionStart: any;
  text: any;
  unselect: any;
}
declare class Frame extends Control {
  borderWidth: any;
  frameStyle: any;
  lineWidth: any;
}
declare class GroupBox extends Control {
  checked: boolean;
  onCheck: (checked: boolean) => void;
  title: string;
  titleCheckBox: boolean;
}
declare class Label extends Frame {
  clear: any;
  margin: any;
  text: any;
  textAlignment: any;
  useRichText: any;
  wordWrapping: any;
}
declare class PushButton extends Control {
  defaultButton: any;
  icon: any;
  iconHeight: any;
  iconWidth: any;
  onClick: any;
  onPress: any;
  onRelease: any;
  pushed: any;
  state: any;
  text: any;
}
declare class RadioButton extends Control {
  checked: any;
  onCheck: any;
  onClick: any;
  onPress: any;
  onRelease: any;
  state: any;
  text: any;
}
declare class ScrollBox extends Control {
  autoScroll: any;
  hideScrollBars: any;
  horizontalAutoScroll: any;
  horizontalScrollBarVisible: any;
  horizontalScrollPosition: any;
  horizontalTracking: any;
  lineHeight: any;
  lineWidth: any;
  maxHorizontalScrollPosition: any;
  maxVerticalScrollPosition: any;
  minHorizontalScrollPosition: any;
  minVerticalScrollPosition: any;
  onHorizontalScrollPosUpdated: (pos: number) => void;
  onHorizontalScrollRangeUpdated: any;
  onVerticalScrollPosUpdated: (pos: number) => void;
  onVerticalScrollRangeUpdated: any;
  pageHeight: any;
  pageWidth: any;
  scrollBarsVisible: any;
  scrollPosition: any;
  setHorizontalScrollRange: any;
  setScrollPosition: any;
  setVerticalScrollRange: any;
  showScrollBars: any;
  tracking: any;
  verticalAutoScroll: any;
  verticalScrollBarVisible: any;
  verticalScrollPosition: any;
  verticalTracking: any;
  viewport: any;
}
declare class Slider extends Control {
  maxValue: any;
  minValue: any;
  normalizedValue: any;
  onRangeUpdated: any;
  onValueUpdated: (value: number) => any;
  pageSize: any;
  setRange: any;
  stepSize: any;
  tickInterval: any;
  tickStyle: any;
  tracking: any;
  value: any;
}
declare class SpinBox extends Control {
  alignment: any;
  autoAdjustWidth: any;
  editable: any;
  maxValue: any;
  minValue: any;
  minimumValueText: any;
  normalizedValue: any;
  onRangeUpdated: any;
  onValueUpdated: (value: number) => any;
  prefix: any;
  setRange: any;
  stepSize: any;
  suffix: any;
  value: any;
  wrapping: any;
}
declare class TabBox extends Control {
  addPage: any;
  clearControls: any;
  clearPageIcon: any;
  currentPageControl: any;
  currentPageIndex: any;
  disablePage: any;
  enablePage: any;
  insertPage: any;
  isPageEnabled: any;
  leftControl: any;
  numberOfPages: any;
  onPageSelected: any;
  pageControlByIndex: any;
  pageIcon: any;
  pageLabel: any;
  pageToolTip: any;
  removePage: any;
  rightControl: any;
  setPageIcon: any;
  setPageLabel: any;
  setPageToolTip: any;
  tabPosition: any;
}
declare class TextBox extends Control {
  caretPosition: any;
  clear: any;
  end: any;
  hasSelection: any;
  home: any;
  insert: any;
  onCaretPositionUpdated: any;
  onSelectionUpdated: any;
  onTextUpdated: any;
  readOnly: any;
  selectAll: any;
  selectedText: any;
  selectionEnd: any;
  selectionStart: any;
  text: any;
  unselect: any;
}
declare class ToolButton extends Control {
  checkable: any;
  checked: any;
  icon: any;
  iconHeight: any;
  iconWidth: any;
  onCheck: any;
  onClick: any;
  onPress: any;
  onRelease: any;
  pushed: any;
  state: any;
  text: any;
}
declare class TreeBox extends Control {
  add: any;
  adjustColumnWidthToContents: any;
  alternateRowColor: any;
  child: any;
  childIndex: any;
  clear: any;
  columnWidth: any;
  currentNode: any;
  headerAlignment: any;
  headerIcon: any;
  headerSorting: any;
  headerText: any;
  headerVisible: any;
  hideColumn: any;
  iconHeight: any;
  iconWidth: any;
  indentSize: any;
  insert: any;
  isColumnVisible: any;
  multipleSelection: any;
  nodeByPosition: any;
  nodeDragging: any;
  nodeExpansion: any;
  nodeRect: any;
  numberOfChildren: any;
  numberOfColumns: any;
  onCurrentNodeUpdated: any;
  onNodeActivated: any;
  onNodeClicked: any;
  onNodeCollapsed: any;
  onNodeDoubleClicked: any;
  onNodeEntered: any;
  onNodeExpanded: any;
  onNodeSelectionUpdated: any;
  onNodeUpdated: any;
  remove: any;
  rootDecoration: any;
  selectAllNodes: any;
  selectedNodes: any;
  setColumnWidth: any;
  setHeaderAlignment: any;
  setHeaderIcon: any;
  setHeaderText: any;
  setIconSize: any;
  setNodeIntoView: any;
  showColumn: any;
  sort: any;
  uniformRowHeight: any;
}
declare class ViewList extends Control {
  currentView: any;
  excludeIdentifiersPattern: any;
  excludedView: any;
  getAll: any;
  getMainViews: any;
  getPreviews: any;
  includesMainViews: any;
  includesPreviews: any;
  onCurrentViewUpdated: any;
  onViewSelected: (view: View) => void;
  reload: any;
  remove: any;
}
declare class WebView extends Control {
  evaluateScript: any;
  hasSelection: any;
  loadContent: any;
  onHTMLAvailable: any;
  onLoadFinished: any;
  onLoadProgress: any;
  onLoadStarted: any;
  onPlainTextAvailable: any;
  onScriptResultAvailable: any;
  onSelectionUpdated: any;
  reload: any;
  requestHTML: any;
  requestPlainText: any;
  saveAsPDF: any;
  selectedText: any;
  setContent: any;
  setHTML: any;
  setPlainText: any;
  stop: any;
  zoomFactor: any;
}

declare class Sizer {
  __base__: any;
  constructor(...args: any[]);
  add(child: Sizer | Control, stretchFactor?: number, alignment?: number): void;
  addScaledSpacing: any;
  addSpacing: any;
  addStretch: any;
  addUnscaledSpacing: any;
  displayPixelRatio: any;
  has(child: Sizer | Control): boolean;
  indexOf(child: Sizer | Control): number;
  insert(
    index: number,
    child: Sizer | Control,
    stretchFactor?: number,
    alignment?: number
  ): void;
  insertScaledSpacing: any;
  insertSpacing: any;
  insertStretch: any;
  insertUnscaledSpacing: any;
  isHorizontal: boolean;
  isVertical: boolean;
  logicalPixelsToPhysical: any;
  margin: number;
  numberOfItems: number;
  parentControl: Control;
  physicalPixelsToLogical: any;
  remove(child: Sizer | Control): void;
  scaledMargin: any;
  scaledSpacing: any;
  setAlignment: any;
  setStretchFactor: any;
  spacing: number;
  unscaledMargin: any;
  unscaledSpacing: any;
}
